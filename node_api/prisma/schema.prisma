generator client {
  provider = "prisma-client-js"
}
generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./dbml"
}


datasource db {
  provider = "sqlite"
  url      = "file:hermes.db"
}

model Event {
  id           Int        @id @default(autoincrement())
  orderId      Int
  timestamp    DateTime
  eventType    Int
  enCoursId    Int?
  Order        Order     @relation(fields: [orderId], references: [id])
}

model Rfid {
  id          Int       @id @default(autoincrement())
  trolley     Int?      @unique
  enCoursId   Int?
  workshopId  Int?
  rfidOrderId Int?       @unique
  reference   String     @unique
  RfidOrder   RfidOrder? @relation(fields: [rfidOrderId], references: [id])
}

model EnCours {
  id        Int        @id @default(autoincrement())
  antennaId Int        @unique
  Antenna   Antenna    @relation(fields: [antennaId], references: [id])
  Workshop  Workshop[]
  Order     Order[]
  Time      Time[]
}

model Order {
  id        Int        @id @default(autoincrement())
  status    Int
  startDate DateTime
  endDate   DateTime?
  enCoursId Int?
  workshopId Int?
  rfidOrderId Int?      @unique
  productId Int
  Product   Product     @relation(fields: [productId], references: [id])
  Workshop  Workshop?   @relation(fields: [workshopId], references: [id])
  EnCours   EnCours?    @relation(fields: [enCoursId], references: [id])
  RfidOrder RfidOrder?  @relation(fields: [rfidOrderId], references: [id])
  Event     Event[]
  Alert     Alert[]
  Support   Support[]
  Time      Time[]
}

model Artisan {
  id      Int       @id @default(autoincrement())
  name    String
  workshopId  Int?
  nfcId   String?
  Worshop Workshop? @relation(fields: [workshopId], references: [id])
  Support Support[]
}

model Alert {
  id        Int       @id @default(autoincrement())
  orderId   Int
  type      Int
  status    Int
  startDate DateTime
  endDate   DateTime?
  Order     Order     @relation(fields: [orderId], references: [id])
}

model RfidOrder {
  id        Int       @id @default(autoincrement())
  status    Int
  Rfid      Rfid?    
  Order     Order?
}

model Workshop {
  id        Int       @id @default(autoincrement())
  name      String
  enCoursId Int       
  EnCours   EnCours   @relation(fields: [enCoursId], references: [id])
  Order     Order[]
  Support   Support[]
  Time      Time[]
  Activity  Activity[]
  Artisan   Artisan[]
}

model Support {
  id         Int       @id @default(autoincrement())
  orderId    Int
  artisanId  Int
  workshopId Int
  type       Int
  startDate  DateTime
  endDate    DateTime?
  Order      Order     @relation(fields: [orderId], references: [id])
  Artisan    Artisan   @relation(fields: [artisanId], references: [id])
  Workshop   Workshop  @relation(fields: [workshopId], references: [id])
}

model Antenna {
  id        Int       @id @default(autoincrement())
  reference Int        @unique
  EnCours   EnCours[]
}

model Stats {
  id        Int       @id @default(autoincrement())
  name      String
  value     Decimal
  unit      String
  change    Int
  isUp      Boolean?
  right     Boolean?
  lastTime  DateTime
}

model Time{
  id          Int       @id @default(autoincrement())
  orderId     Int
  duration    Int
  enCoursId   Int?
  workshopId  Int?
  Order       Order     @relation(fields: [orderId], references: [id])
  EnCours     EnCours?  @relation(fields: [enCoursId], references: [id])
  Workshop    Workshop? @relation(fields: [workshopId], references: [id])
}

model Product{
  id          Int       @id @default(autoincrement())
  material    String
  color       String
  option      String
  averageDuration     Float
  averageEcDuration   Float
  averagePrdDuration  Float
  Order       Order[]  
}

model Activity{
  id          Int       @id @default(autoincrement())
  name        String 
  description String
  workshopId  Int
  Worshop     Workshop @relation(fields: [workshopId], references: [id])
}